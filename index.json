[{"content":" Thunderbird 102 将带来有用的新功能以及 UI/UX 升级。在此查看其中最精彩的内容！\n 毫无疑问，Thunderbird 是 Linux 上最好的 电子邮件客户端 之一。\n它是 Mozilla 基金会的一个开源产品，是一个具有强大功能的可靠的电子邮件客户端。\n在 最近的更新 中，它已经新增了一些功能以及视觉上的改进。\n现在，随着 Thunderbird 102 即将发布，它将添加更多激动人心的功能。\n在一条 推特讨论 中，Thunderbird 分享了所有关于此次更新的信息。我在这里挑选其中的关键亮点介绍一下。\nThunderbird 102：更新了什么？ Thunderbird 102 将是一次重大升级，它增加了一些有用的功能，预期发布时间 为 2022 年 6 月 28 日。其中包括下面这几个变化：\n 空间工具栏 新的地址簿 支持 Matrix 协议 链接预览卡片 账户设置中心 导入/导出 重新设计的邮件标题栏  这听起来不错吧，这里还有一些关于以上变化的更多细节。\n1. 空间工具栏 新的“空间工具栏Spaces Toolbar”位于左边的侧边栏中，它将不同的活动以图标的形式分隔开来。\n你可以更容易地在电子邮件客户端内的多个标签间导航，也可以更容易地管理它们。\n你也可以折叠工具栏，让它作为一个图标显示在标签栏中，为你节省一些屏幕空间。\n2. 新的地址簿 地址簿有了新的外观，它应该能帮助你轻松找到你的联系人，并与他们进行互动。\n联系人信息的整体布局看起来更容易访问，它提供了你想知道的所有细节，理应也能为你提供良好的用户体验。\n3. 支持 Matrix 协议 Matrix 是一个流行的分布式开源聊天协议。因此，在 Thunderbird 102 中，你将能够开箱即用 Matrix 的聊天功能，非常轻松。\nMatrix 最初只在测试版中作为实验性功能提供。\n你可以期待它在未来的进一步完善。\n4. 链接预览卡片 链接预览将帮助用户建立对链接内容的预期，有助于改善用户体验。\n而且，对于像 Thunderbird 这样的直截了当的电子邮件客户端，我从未指望它会提供链接预览这样的功能，直到现在。\n每当你在电子邮件编辑器email composer中添加一个链接时，你都可以选择将其转换为丰富的链接预览。\n5. 账户设置中心 对于任何服务/应用程序来说，有一个简单的设置过程都是极其重要的。\nThunderbird 102 改进了所有账户设置功能的体验，如添加账户、管理日历、导入配置文件等。\n6. 默认的导入/导出功能 到目前为止，你都必须依靠一个插件来导入/导出个人资料数据。\n而在 Thunderbird 102 中，导入/导出功能将是开箱即用的，无需使用附加组件。\n7. 重新设计的邮件标题 邮件的标题/主题得到了细微的升级，以更好地突出重要信息，并使其在导航时能够快速响应。\n其他变化 除了以上的关键亮点外，你还可以得到许多技术升级和错误修复。\n例如，OpenPGP 的用户体验和用户交互也得到了升级，同时还有一个新的存储格式：Maildir。\n你对 Thunderbird 102 即将新增的功能有什么看法吗？你对 Thunderbird 的用户体验/用户交互升级感到兴奋吗？请在下方的评论区中说说你的想法，或只是简单说声“谢谢”。\n  本文遵循 CC-BY-SA 4.0 许可协议 作者：Ankush Das / 译者：六开箱 原文：Thunderbird 102 is Getting Several Exciting New Features! Here Are 7 of Them 首发：7 个 即将发布的 Thunderbird 102 版本的新功能 @ Linux 中国  ","permalink":"https://lkxed.github.io/posts/thunderbird-102-features/","summary":"Thunderbird 102 将带来有用的新功能以及 UI/UX 升级。在此查看其中最精彩的内容！","title":"Thunderbird 102 发布：7 个新特性"},{"content":" 对于 Linux 初学者来说，Zorin OS 是一个绝佳的选择。在本文中，我将列举 5 个理由来说明。\n 为什么 Zorin OS 是初学者的理想选择 Zorin OS 无疑是目前最 漂亮的 Linux 发行版 之一。\n然而，它并不局限于有一个漂亮的外观。与其他一些竞争者相比，它也在总体上提供了良好的用户体验。\n所以，这就是为什么我们也推荐它作为 新用户的首选之一 。本文中，我将重点介绍一些原因，正是它们使 Zorin OS 成为初学者的理想选择。\n1. 类似 Windows 的用户界面 考虑到 Windows 庞大的用户基础，大多数刚接触 Linux 的用户都是从 Windows 转过来的。\n如果你已经使用过某个 流行的 Linux 发行版 ，你当然可以很轻松地切换到其他发行版。\n然而，如果你从未使用过 Linux，那么对你而言，用户界面越熟悉，你就会越适应。\nZorin OS 是众多 Windows 风格的 Linux 发行版 之一，在这里你可以找到与 Windows 10 和 11 的开始菜单/任务栏相似的的菜单/布局。\nWindows 11 的布局在其专业版中提供（我们稍后会讨论到它）。\n2. 出色的用户体验 与 Linux Mint、Ubuntu 等发行版相比，Zorin OS 提供了一个独特而精致的外观。\n它的图标、动画效果和整体视觉效果（以及可用的壁纸）都看起来令人惊叹，并且它们完美地适合于任何现代系统。\nZorin OS 预装了必要的应用程序，让你有一个良好的初始体验，并使你可以十分方便地 在 Linux 上安装 Windows 软件 （如果你在软件中心没有找到这个软件的话）。\n在使用 Zorin OS 的过程中，我从未遇到过错误，也不需要使用终端来完成工作。所以，我想说，它提供了用户友好的体验。\n虽然 我日常使用的系统是 Pop!_OS ，但偶尔切换到 Zorin OS 也是一种新鲜的体验。\n我目前还没有在我的双显示器设置上试用过 Zorin OS ，并分享我的经验。我将在不久之后发布一篇相关文章，敬请期待。\n3. 基于 Ubuntu Ubuntu 是最受欢迎的 Linux 发行版，这归功于它的易用性和现代设计方法。\n虽然它提供了一个完全不同的用户体验，但它支持大量的软件集合，并与大多数硬件配置兼容。\nZorin OS 是基于 Ubuntu 构建的，因此它能为你提供同样的好处，并且它还对用户界面和其他方面进行了调整。\n作为基于 Ubuntu 的 Linux 发行版之一，Zorin OS 无疑是值得推荐给初学者的。\n4. 专业版 与 Windows 相比，使用 Linux 的好处 之一是，你可以在任意数量的系统上免费安装和分发它。\n你不需要为此购买许可证。然而，Zorin OS 也提供了一个可选的“专业”版，一次性收费约为 39 美元。\n专业版提供了额外的壁纸、布局（类似 macOS，如上图所示），以及预装的创意和生产力软件。不用担心，所有包含的软件都是免费和开源的。\n因此，通过这个专业版，你获得了更好的开箱即用的体验和一些额外的功能，与此同时，你也支持了他们的未来发展。\n5. 对旧电脑的系统资源要求较低 与其他一些竞争者不同，Zorin OS 提供了一个由 XFCE 桌面环境驱动的独立的 “精简版” 。\n这个精简版是为在旧电脑上运行而定制的，资源占用最少。\n如果你想为你的旧电脑注入活力，或者只是想让你的电脑消耗最少的资源，Zorin OS 精简版可能会是一个不错的选择。\n 获取 Zorin OS  总结 除了上面提到的几点，Zorin OS 还提供了一个教育版，专门为学校、学生和教师定制。\n当你开始使用 Zorin OS，无论你的需求是什么，它都能在不同的使用场景中派上用场。我认为它应该是初学者的理想选择。\n欢迎你在下面的评论中分享你的想法。\n  本文遵循 CC-BY-SA 4.0 许可协议 作者：Ankush Das / 译者：六开箱 原文：5 Reasons Why Zorin OS is an Ideal Choice for Beginners 首发：为什么 Zorin OS 是初学者的理想选择 @ Linux 中国  ","permalink":"https://lkxed.github.io/posts/why-zorin-os-beginners/","summary":"对于 Linux 初学者来说，Zorin OS 是一个绝佳的选择。在本文中，我将列举 5 个理由来说明。","title":"Zorin OS：新手的最佳选择"},{"content":" 本文介绍了几种端口转发最常见的使用场景。\n 端口转发简介 端口转发就是把网络流量从一个网络监听者（称为一个“端口”）发送到另一个上，无论这两个端口是否属于同一台电脑。在这里，端口不是某个物理实体，而是一个监听网络活动的软件程序。\n当流量被定向发往到某个特定的端口，它会先到达一个路由器或是防火墙，亦或是其他的网络程序。它最终收到的响应可能会根据它想要通讯的端口来定义。比如，当你使用端口转发时，你可以捕获到发往 8080 端口的流量，然后把它转发到 80 端口。对于接收信号的原端口来说，这个新的目标端口可能和它在同一台设备上，也可能是在另一台设备上。我们在很多情况下都会用到端口转发，实现的方式也有很多。本文将介绍其中最常见的几种使用场景。\n使用路由器来进行端口转发 如果你在把服务器架设在家里，那么你通常是不需要转发端口的。你的家庭路由器（通常是你从网络服务提供商Internet Service Provider, ISP获得的 WiFi 设备）有一个内置的防火墙，它的作用是阻止外面的世界访问到你的家庭网络。通过使用端口转发，你可以允许某个指定端口的流量穿过路由器的防火墙，并发送到局域网中的某个指定的 IP 地址。\n比如说，你架设了一个 Minetest 服务 ，并想要邀请你的朋友们来试试。为了让他们能够“穿过”你的路由器，从而到达这个 Minetest 服务，你必须把路由器上的某个端口转发到托管 Minetest 服务的电脑上。Minetest 服务默认运行在 30000 端口。你可以把路由器的 30000 端口转发到你的电脑的 30000 端口上，或者你也可以随便转发到一个更简单的端口上，这样玩家们会更容易记住它。我发现，当使用 30000 端口的时候，人们时常会少数几个 0（特别是没有逗号分隔符的帮助时），所以我一般使用路由器的 1234 端口，然后把它转发到我内部的 30000 端口。\n每个制造商的路由器接口都不一样，但是不管你用的是什么牌子的路由器，方法都是相同的。首先，你需要登录到你的路由器。\n通常，路由器的 IP 地址和登录信息都会打印在路由器上，或者在是它的文档里。我有一个型号为 TP-Link GX90 的路由器，我在浏览器里访问 10.0.1.1 就可以登录它，但你的路由器可能是 192.168.0.1 或者其他的地址。\n我的 GX90 路由器把端口转发功能称为“虚拟服务器virtual servers”，它是路由器的“NAT 转发”标签下的一个功能选项。NAT 的意思是 “网络地址转换Network Address Translation”。在其他路由器中，这个功能可能直接就叫做“端口转发”，或者叫“防火墙”、“服务”等。找到正确的功能选项可能需要花费一些时间，因此，你可能需要花点时间研究下你的路由器文档。\n当你找到了路由器的端口转发设置，添加一个新规则，命名一个外部端口（在我的例子中是 1234）和一个内部端口（30000）。把外部端口转发到内部端口上，而内部端口绑定在你想要大家访问的电脑的 IP 地址上。如果你需要一些查询本机 IP 地址的帮助，你可以阅读 Archit Modi 写的 “在 Linux 上如何查询本地 IP 地址 ”。\n 图源 Seth Kenlon / CC-BY-SA 4.0  在这个例子中，访问家庭网络的 1234 端口的流量，都会被转发到了我的家庭服务器的 30000 端口上，后者的 IP 地址是 10.0.1.2。\n在继续之前，先保存这个规则。\n接下来，你需要知道你的家庭网络的公网 IP 地址是多少。你可以从 ifconfig.me 或者 icanhazip.com 上获得这个地址。你可以在浏览器中打开这两个网站的其中一个，也可以使用 curl 命令来获取到这个 IP。\n$ curl ifconfig.me 93.184.216.34 现在，你的朋友们就可以在 Minetest 客户端里输入 169.169.23.49:1234，加入你的 Minetest 服务器啦。\n使用防火墙来进行端口转发 系统管理员有时候需要转发访问服务器的流量。比如说，你可能想要接收来自 80 端口的流量，但是用户的服务却运行在 8065 端口。如果不进行端口转发的话，你的用户就不得不在输入浏览器的 URL 末尾，加上一个指定的端口号，例如 example.com:8065。大多数用户都不习惯于考虑端口的问题，所以你需要把访问网络通用的 80 端口的请求拦截下来，然后转发到你的网络应用的具体端口，这会给用户带来巨大的方便。\n你可以在服务器上使用 firewall-cmd 来转发流量，它是访问 firewalld 后台进程的前端front-end命令。\n首先，设置好你想要转发的端口和协议：\n$ sudo firewall-cmd \\  --add-forward-port \\  port=80:proto=tcp:toport=8065 为使修改永久生效，你需要加上 --runtime-to-permanent 选项：\n$ sudo firewall-cmd --runtime-to-permanent 网络转发 在网络传输中，除了端口转发外，还有其他种类的转发forwarding形式，例如 IP 转发和代理等。当你熟悉了网络信息在路由时是怎么被处理的之后，你可以试试不同的转发形式（然后使用 tcpdump 或类似的工具）来看看哪一种最好、最符合你的需求。\n  本文遵循 CC-BY-SA 4.0 许可协议 作者：Seth Kenlon / 译者：六开箱 原文：What is port forwarding? 首发：端口转发简介 @ Linux 中国  ","permalink":"https://lkxed.github.io/posts/what-port-forwarding/","summary":"本文介绍了几种端口转发最常见的使用场景。","title":"什么是「端口转发」"},{"content":" 首先在 Java 中创建并初始化一个整型列表，然后在 Groovy 中做同样的事。\n 我非常喜欢 Groovy 编程语言 。我喜欢它是因为我喜欢 Java，尽管 Java 有时候感觉很笨拙。正因为我是那么喜欢 Java，其他运行在 JVM 上语言都不能吸引我。比方说 Kotlin、Scala 还有 Clojure 语言，它们感觉上就和 Java 不一样，因为它们对于什么是好的编程语言的理解不同。Groovy 和它们都不一样，在我看来，Groovy 是一个完美的选项，特别是对于一部分程序员来说，他们喜欢 Java，但是又需要一个更灵活、更紧凑，并且有时候更直接的语言。\n列表List 这种数据结构是一个很好的例子，它可以容纳一个无序的列表，列表中的元素可以是数字、字符串或者对象，程序员可以用某种方式高效地遍历这些元素，特别是对于编写和维护脚本的人来说，“高效”的关键就是要有简洁清晰的表达，而不需要一大堆“仪式”，把代码的意图都变模糊了。\n安装 Java 和 Groovy Groovy 是基于 Java 的，因此需要同时安装一个 Java 才行。你的 Linux 发行版的仓库中可能有最近的比较好的 Java 版本。或者，你也可以在根据 这些指导 来安装 Groovy。对于 Linux 用户来说，SDKMan 是一个不错的代替选项，你可以使用它来获取多个 Java 和 Groovy 版本，以及许多其他的相关工具。在这篇文章中，我使用的 SDK 发行版是：\n Java: OpenJDK 11 的 11.0.12-open 版本 Groovy: 3.0.8 版本  Java 是怎么做的 Java 中有很多方法可以实例化并初始化列表，从它最初被引入的时候就有了（我记得是在 Java 1.5 的时候，但请不要引用我的话）。在这些方法里，有两个有趣的方法，它们涉及到了 java.util.Arrays 和 java.util.List 这两个类。\n使用 java.util.Arrays 类 java.util.Arrays 类定义了一个 asList() 静态方法，它可以被用来创建一个基于数组的列表，因此大小是不可变的，尽管其中的元素是可以被修改的。下面是它的使用方式：\nvar a1 = Arrays.asList(1,2,3,4,5,6,7,8,9,10); // 可变元素的不可变列表  System.out.println(\u0026#34;a1 = \u0026#34; + a1); System.out.println(\u0026#34;a1 is an instance of \u0026#34; + a1.getClass()); // 输出为 // a1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] // a1 是 java.util.Arrays$ArrayList 类的一个实例  a1.set(0,0); // 成功 System.out.println(\u0026#34;a1 = \u0026#34; + a1); // 输出为 // a1 = [0, 2, 3, 4, 5, 6, 7, 8, 9, 10]  a1.add(11); // fails producing // Exception in thread \u0026#34;main\u0026#34; java.lang.UnsupportedOperationException System.out.println(\u0026#34;a1 = \u0026#34; + a1); // not reached 使用 java.util.List 类 java.util.List 类定义了一个 of() 静态方法，它可以被用来创建一个不可变的列表，其中的元素是否可变要取决于它们本身是否支持修改。下面是它的使用方式：\nvar a2 = List.of(1,2,3,4,5,6,7,8,9,10); System.out.println(\u0026#34;a2 = \u0026#34; + a2); System.out.println(\u0026#34;a2 is an instance of \u0026#34; + a2.getClass()); // 输出为 // a2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] // a2 是 java.util.ImmutableCollections$ListN 类的一个实例  a2.set(0,0); // fails producing // Exception in thread \u0026#34;main\u0026#34; java.lang.UnsupportedOperationException System.out.println(\u0026#34;a2 = \u0026#34; + a2); // not reached  a2.add(11); // also fails for same reason if above two lines commented out System.out.println(\u0026#34;a2 = \u0026#34; + a2); // not reached 因此，我可以使用 Arrays.asList()，也可以使用 List.of() 方法，前提是如果我想要的是一个大小不能改变、且不关心元素是否可变的列表。\n如果我想要初始化一个可变的列表，我更倾向于把这些不可变的列表作为参数传给一个列表构造器，就像下面这样：\nvar a1 = new ArrayList\u0026lt;Integer\u0026gt;(Arrays.asList(1,2,3,4,5,6,7,8,9,10)); System.out.println(\u0026#34;a1 = \u0026#34; + a1); System.out.println(\u0026#34;a1 is an instance of \u0026#34; + a1.getClass()); // 输出为 // a1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] // a1 是 java.util.ArrayList 类的一个实例  a1.set(0,0); System.out.println(\u0026#34;a1 = \u0026#34; + a1); // 输出为 // a1 = [0, 2, 3, 4, 5, 6, 7, 8, 9, 10]  a1.add(11); System.out.println(\u0026#34;a1 = \u0026#34; + a1); // 输出为 // a1 = [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] 注意，这个 Arrays.asList() 方法是用来初始化这个新的 ArrayList\u0026lt;Integer\u0026gt;() 的，也就是说，它为这个传进来的列表创建了一个可变的拷贝。\n现在，或许只有我这么想，但是这种方式确实看起来需要理解很多关于 java.util.Arrays 和 java.util.List 类的细节才行，而我只是想要创建并初始化一个数字列表而已（尽管真正使用到的语句并没有太多“仪式”）。下面是真正用到的那行代码，仅供参考：\nvar a1 = new ArrayList\u0026lt;Integer\u0026gt;(Arrays.asList(1,2,3,4,5,6,7,8,9,10)); Groovy 是怎么做的 下面来看看在 Groovy 中如何实现上述需求：\ndef a1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] println \u0026#34;a1 = $a1\u0026#34; println \u0026#34;a1 is an instance of ${a1.getClass()}\u0026#34; // 输出为 // a1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] // a1 是 java.util.ArrayList 类的一个实例  a1[0] = 0 println \u0026#34;a1 = $a1\u0026#34; // 输出为 // a1 = [0, 2, 3, 4, 5, 6, 7, 8, 9, 10]  a1 \u0026lt;\u0026lt; 11 println \u0026#34;a1 = $a1\u0026#34; // 输出为 // a1 = [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] 我们一眼就能发现，Groovy 使用了 def 关键字而不是 var 关键字。我还发现了，仅仅是把一系列的类型（在这个例子里是整数）放进括号里，我就得到了一个创建好的列表。此外，这样创建出来的列表完全就是我想要的：一个可变的 ArrayList 实例。\n现在，或许再一次只有我这么想，但是上面的代码看起来要简单多得多 —— 不用记住 .of() 和 .asList() 返回的是“半不变semi-mutable”的结果，也不用为它们做一些补偿。另外一个好处是，我现在可以使用括号和下标来引用列表中的某个特定元素，而不用这个叫 set() 方法。另外，这个跟在列表后面的 \u0026lt;\u0026lt; 操作符也很方便，我再也不用调用 add() 方法来添加元素啦。还有，你注意到代码中没有分号了吗？没错，在 Groovy 里，句末的分号并不是必须的。最后，我们来看看字符串插值，只要在字符串里用 $变量 或者 ${表达式} 就可以实现了哦！\n在 Groovy 世界中还藏着许多“有待发掘”的东西。上面的列表定义其实是一个动态类型（Groovy 中默认）和 Java 中的静态类型的对比。在上面的 Groovy 代码定义的那一行，变量 a1 的类型是在运行的时候，根据等号右边的表达式的计算结果推断出来的。现在我们都知道，动态语言可以给我们带来强大的功能，有了强大的功能，我们有了很多机会去尝试不同的东西。对于那些不喜欢动态类型的程序员来说，Groovy 也支持静态类型。\nGroovy 相关资源 Apache Groovy 网站上有非常多的文档。另一个很棒的 Groovy 资源是 Mr. Haki 。学习 Groovy 还有一个很棒的原因，那就是可以接着学习 Grails ，后者是一个优秀的、高效率的全栈 Web 框架，基于许多优秀组件构建而成，比如有 Hibernate、Spring Boot 和 Micronaut 等。\n  本文遵循 CC-BY-SA 4.0 许可协议 作者：Chris Hermansen / 译者：六开箱 原文：Creating and initializing lists in Java and Groovy 首发：在 Java 和 Groovy 中创建和初始化列表的不同 @ Linux 中国  ","permalink":"https://lkxed.github.io/posts/creating-lists-groovy-java/","summary":"首先在 Java 中创建并初始化一个整型列表，然后在 Groovy 中做同样的事。","title":"Groovy 对比 Java：创建并初始化 List"},{"content":" 有了 Linux，即便是新手用户，也能通过大量熟悉的应用程序获得流畅、精致的桌面体验。\n Linux 无处不在 大型强子对撞机是 由 Linux 驱动 的，国际空间站上的笔记本电脑是 运行在 Linux 上 的，Instagram 和 Nest thermostats 也是如此。最近，我们观看了 机智号Ingenuity 在火星上空飞翔，它是一个令人惊叹的无人直升机，也是 由 Linux 驱动的 ！这进一步证明了这个操作系统的灵活性和通用性。\n但是现在，真正的大新闻来了。我在这里“官宣”：Linux 也可以给父母使用！\n事情经过 大约一年前，我决定把妈妈的电脑环境迁移至 Linux。现在，一年过去了，是时候回顾和总结一下了。\n和大多数人一样，我是专属的 “妈妈的电脑管理员”。我的妈妈是一个 60 多岁的可爱老太太 —— 一个真正的甜心。她的电脑技能很基础，她的电脑使用需求也很基础：上上网，发发邮件，打打字，浏览、编辑照片，看看视频听听歌，还有就是在 Skype 或者 Signal 上和家里人或者朋友们打打电话。\n直到去年之前，妈妈一直在使用一个 Windows 笔记本电脑。电脑已经很旧了，但还不算太糟糕。于是在某一天，通过欺骗、威胁和弹出讨厌的窗口等手段，微软终于成功让她点击了那个可怕的按钮 —— “升级到 Windows 10”。\n她绝望地向我呼救。作为妈妈的电脑管理员，我的生活很快就变成了地狱。“为什么所有东西看起来都不一样了？我的应用列表跑去哪儿了？什么，这堆瓷块一样的东西变成我的应用列表了？我的电脑怎么变得这么慢？它怎么每天都要自动更新重启，而且偏偏就是在我想要用它的时候？为什么有东西（她指的是硬盘）一直嗡嗡嗡地叫？它到底一直在忙些什么啊？”\n可是我又看不到源代码，我怎么它一直在忙些什么呢？\n本来我是打算回滚这个升级的，但是 Windows 7 马上就要终止支持了，我担心会发生最坏的事情：没有了安全更新，妈妈的电脑很快就会变成数不清的僵尸网络bot networks中的一员，一天到晚地挖矿、发送垃圾邮件，以及对全国的重要设施发动恶毒的 DDOS 攻击。最后还是需要我来清理这个烂摊子 —— （而且是）每一个周末。\n大救星 Linux 来了 我决定把她的电脑环境迁移到 Linux 上，反正也没有什么可损失的。我自己在五年前就这么做了，我从未那么开心过。不如让妈妈也试试，肯定不会有什么坏处。\n当妈妈知道我要一次性解决她所有的问题时，她非常开心。但她不知道的是，她将成为一项为期一年的科学实验的关键部分，这个实验叫做：“妈妈能学会使用 Linux 吗？”\n 图源 Tomasz Waraksa / CC-BY-SA 4.0  于是，在 2020 年 2 月的某一天，我从遥远的都柏林带着一台使用七年的联想 Yoga 13 来到这里，这台电脑和妈妈那台有着相似的参数，但它的屏幕要好很多，而且只有一半的重量。我在 VirtualBox 里讨论和测试了不同的 Linux 发行版，最终选择了 Zorin OS 发行版，一个自豪的“爱尔兰造”系统。我选择它是考虑到了下面几个因素：\n 它基于我最熟悉的 Ubuntu Linux。 它和 Windows 7 很像，在精心设计的同时考虑到了 Windows 难民。 我感觉它很轻量、简单，对妈妈来说足够保守。完全没有 macOS Big Sur 上的花里胡哨！   图源 Tomasz Waraksa / CC-BY-SA 4.0  系统安装 我用自己一贯的方式安装了这个操作系统，为 /home 目录单独分了一个区，这样一来，系统重装时（尽管不大可能发生）妈妈的文件仍然能够保持安全。这是我的惯用技巧，它可以方便我安装发行版的深夜更新。\n在安装过程中，我选择了波兰语作为用户界面语言。和我一样，妈妈也是个彻头彻尾的波兰人。不必担心，Linux 看起来支持所有语言，甚至包括 克林贡语 。\n接着，根据妈妈的需求，我安装了下面这些应用：\n Skype Signal 桌面客户端  谷歌 Chrome 浏览器 Geary 邮件客户端 gThumb ，用来浏览和编辑照片 VLC ，用来播放视频和音乐 Softmaker Office，用来编辑文本和表格  注意到列表里没有杀毒软件了吗？好耶！\n一个小时后，系统和应用全部安装完成，妈妈的 Zorin OS 已准备就绪。\n 图源 Tomasz Waraksa / CC-BY-SA 4.0  设置系统 通过下面这几个步骤，我把自己设置成了妈妈的电脑管理员：\n 为我自己创建了一个管理员账户 把妈妈的账户设置为非管理员 安装了用于远程无人值守访问的 ssh 守护程序 把这台机器加入到了我的 Hamachi VPN 中：这样一来，我就可以安全地使用 ssh 连接，而不需要打开路由器上的 22 端口。Hamachi 是一个由 LogMeIn 提供的 VPN 服务。它是一个传统的 VPN，我的意思是，它的目标不是让你在另外一个国家运行 Netflix 应用，而是在互联网上为计算机之间建立一个安全的网络连接。 启动了简单防火墙（ufw）并允许 ssh 流量 安装了 AnyDesk 来远程登录到桌面  这样操作之后，我就可以通过安全的 ssh 连接访问到妈妈的笔记本电脑。我可以通过 shell 进行定期维护，而妈妈甚至不会注意到任何事情。这是因为 Linux 完成更新后通常 不需要 重新启动。真是一个奇迹啊！简直不可能的事，它是怎么做到的呢？\n 图源 Tomasz Waraksa / CC-BY-SA 4.0  妈妈能学会使用 Linux 吗 毫无疑问！\n尽管当我把新电脑展示给她看的时候，她确实有问到为什么这个新的 Windows 又看起来不一样了。我不得不解释说这个其实不是 Windows，而是 Linux，然后向她解释了为什么我们都爱 Linux。不过，她学得很快。这个经典的 Zorin OS 桌面和她用惯了的 Windows 7 十分相似。我看到她在系统里点来点去，然后很轻松地找到并且运行了她熟悉的应用程序。\n她立刻就注意到电脑启动快了很多，表现也好了很多。\n然后她开始问我什么时候会给她做电脑的定期清理，好让她电脑不会再一次变慢。我和她解释说，以她的日常使用量，不需要再做定期清理了。Linux 和 Windows 不一样，它不会自己“腐烂”的。目前来说，的确如此。她的电脑仍然像第一天那样流畅和快速。\n我时不时地会问她对新电脑感觉怎么样，她总是回答说很满意。一切都很顺利。电脑也不会莫名其妙就变得忙起来。再也不会有一些“很重要的更新”来打断她。应用菜单也总是在它该在的地方。在这个全新的环境中，她对自己常用的应用程序也感到满意。\n在这一年中，我远程登录过几次她的电脑，为的是进行常规的软件包升级。我还使用 AnyDesk 登录过两次她的桌面。一次是妈妈问我能不能帮她把 SD 卡里的照片自动导入到 ~/Pictures 目录里，如果能够放到以日期命名的目录里就更好了。当然可以，只要懂一点点的 Bash，就可以使用 gThumb 很轻松地实现这个功能。另一次，我把她经常访问的网站添加到了桌面，这样她点击桌面图标就可以访问了。\n这就是目前我作为妈妈的 Linux 管理员所做的全部事情！按照这个情况，我还可以再给 50 个妈妈当电脑管理员！\n总结 我希望我的故事能够启发你考虑迁移到 Linux。过去，我们认为 Linux 对于普通用户来说太难了。但今天，我相信事实恰恰相反。用户使用电脑越不熟练，他们就越有理由迁移到 Linux！\n有了 Linux，即便是新手用户，也能通过大量熟悉的应用程序获得流畅、精致的桌面体验。新手用户们将比在任何其他流行的计算平台上都要安全得多。并且，通过远程访问来帮助他们从未如此简单和安全！\n免责声明：本文不推广所描述的任何产品、服务或供应商。我与他们没有任何商业利益或联系。我并没有在暗示这些产品或服务是最适合你的，也不承诺你的体验会和我一样。\n本文最初发布在 Let\u0026rsquo;s Debug It 上，在获得许可后重新使用。\n  本文遵循 CC-BY-SA 4.0 许可协议 作者：Tomasz / 译者：六开箱 原文：How I helped my mom switch from Windows to Linux 首发：我是如何帮助妈妈从 Windows 切换至 Linux 的 @ Linux 中国  ","permalink":"https://lkxed.github.io/posts/mom-switch-linux/","summary":"有了 Linux，即便是新手用户，也能通过大量熟悉的应用程序获得流畅、精致的桌面体验。","title":"妈妈与 Linux 的「周年纪念」"},{"content":" Threema 是一个优质的开源通讯软件，专注于安全和隐私，提供了一个去中心的基础设施。\n 现在已经有很多私密的 WhatsApp 代替品可供我们选择，Threema 则是其中最好的可选项之一。\n可是，为什么你要考虑尝试它呢？它是“终极的”安全通讯软件吗？\n怎么说呢，每个安全通讯软件都只满足特定用户群体的需求。所以，把任何开源的通讯软件当作是“终极的”选项，都是不明智的。\n因此，我列举了一些你或许会想尝试 Threema 而不是其他类似选项的理由。\nThreema：背景概览 在我开始说明为什么要尝试 Threema 这款私密通讯软件之前，请允许我再介绍一下它。\nThreema 是一个流行的安全通讯软件，它由瑞士团队研发，专注于个人隐私。它也是一个付费软件，你需要在 Play Store 或者 App Store 上，一次性支付费用（大约 4 美元），才能够在你喜爱的移动设备上使用它。\n起初，它是一个专有的安全通讯软件，是 Signal 等其他软件的竞争者。\n在 2020 年的时候，Threema 决定在 GitHub 上开源它的所有软件。\n你可以下载到移动应用，也可以得到 Linux 桌面（包括 Windows 和 macOS）上的支持。遗憾的是，它在桌面上目前没有独立的客户端。\n因此，你需要让移动设备保持开启状态，才能使用桌面上的 Threema（就和 WhatsApp Web 的工作方式一样）。\n尝试 Threema 的 7 个理由 如果你正在寻找一个隐私友好的安全通讯软件，并且你的同事/朋友/家人不介意支付一次性费用的话，你可以把它作为一个可选项。\n支持你这么做的理由包括：\n1. 不需要手机号码 和 WhatsApp 不同，你不需要使用手机号码来注册 Threema。当然，你可以选择添加你的手机号码，如果你希望别人能够很快找到你的话。\n但是，手机号码只是注册 Threema 的一个选填项。如果你不想让别人知道你的手机号码，你可以使用注册时生成的 Threema ID（用户名）。\n这样的话，如果你要和别人交流，你必须分享你的 Threema ID，而不是你的手机号码。\n值得一提的是，即使在没有 SIM 卡的设备上，它也能完美工作，因为你不必提供手机号码就可以注册成功。\n2. 开源 虽然这是一个显而易见的理由，但它十分重要。\n我非常重视这一点。如果你想要一个值得信赖的 WhatsApp 替代品，你应该倾向于选择一个开发稳定的开源通讯软件。\n3. 去中心化的基础设施 和大多数主流产品不同，Threema 提供了一个去中心化的基础设施，以确保更好地抵御检查。\n换句话说，Threema 并不依赖于一个中心服务器架构，也就不会发生“一个错误导致整个网络瘫痪”这种情况。\n这个错误可能是一次停电，或者是一次检查/限制服务的行动。\n在这些情况下，Threema 会是更有用和更有效的选择。\n4. 收费软件 它是一个收费软件（一次性付费），这也算是一个好消息吗？\n对于某些人来说，是的。\n如果你想要寻找一个几乎不可能有垃圾消息的通讯软件，而且你也不想让你的联系人找到你（或是给你发一些你不想要的信息），那么 Threema 就是你的一个完美选项。\n毕竟，为一个出色的开源解决方案而付费是值得的，对吧？\n5. 可靠的用户界面和特性 Threema 不是一个新产品，它已经开发了好几年了。\n因此，它能够提供稳定的用户体验，以及一些激动人心的特性，比如说它支持在群聊中发起投票。\n你可以使用“同意/不同意”选项，以一种静默的方式确认接收方是否收到了消息，而不会触发一个发送给他们的通知。\n注意，“同意/不同意”的功能只在个人会话中有效。\n你也可以使用二维码来验证你的联系人身份，以此来避免中间人man-in-the-middle攻击。\n和其他的安全通讯软件相比，Threema 对平板电脑的支持也不错。\n6. 瑞士团队 \u0026amp; 遵守 GDRP 准则 你可能会在意，开发团队是否会受到所在国家的司法管辖权和隐私法等限制，那么对你而言，Threema 就是一个理想的私密通讯软件。\nThreema 受瑞士的法律约束，而众所周知，瑞士的法律是最重视个人隐私的。\n除此之外，Threema 还提到了它完全遵守 GDRP 准则。如果你在意这一点的话，Threema 是一个不错的选择。\n7. 工作中使用 有趣的是，Threema 还有另外一个 独立的版本 ，专注于加强公司内部的通讯安全。\n所以，如果你需要一个安全通讯平台来作为即时通讯软件的话，Threema 将是一个吸引人的选择。\n 试试 Threema   最后，我的看法 我已经使用 Threema 很长时间了，我承认我在上面没有很多联系人。\n但我还是要说，它的用户体验是极佳的，并且我在 iOS 和 Android 端都使用过相当长的时间。\n因此，Threema 更适合那些不想对任何有关隐私的特性妥协的严肃用户。\n与此同时，作为一款收费软件，并不是每个人都愿意尝试它。但仔细想想，你将会得到一个可靠的注重隐私的通讯软件，它还是开源的，并且会接受定期的审查。\n你对这款软件有什么看法？请在评论区分享你的观点吧！\n  本文遵循 CC-BY-SA 4.0 许可协议 作者：Ankush Das / 译者：六开箱 原文：7 Reasons to Try Open Source Secure Messenger \u0026lsquo;Threema\u0026rsquo; 首发：尝试开源的安全通讯软件 Threema 的 7 个理由 @ Linux 中国  ","permalink":"https://lkxed.github.io/posts/reasons-to-try-threema/","summary":"Threema 是一个优质的开源通讯软件，专注于安全和隐私，提供了一个去中心的基础设施。本文介绍了尝试它的 7 个理由。","title":"Threema：开源的安全通讯软件"}]